from pysam import AlignmentFile, AlignedSegment

from bam_feature_extractor.core.report import Report
from bam_feature_extractor.core.worker import Worker


class AlignementRatio(Worker):
    description = """
    For each 'read' in the BAM file, computes:
    - the query_sequence length
    - the query_alignment_sequence length
    - the ratio between the two length
    
    The output is a list of the form:
    
    query_sequence
    query_alignment_sequence
    align:  {ratio}% (seq_len/align_len)
    
    Example:
    TTTTCTTCTTTTGCCATATTGTCGCATTGAAGTTTTGGCGAGGCGCTGATAGCTGGCAGGCCCGCTGGTTCCATCCTGACGAAAGAATGATCAACTTGGCAATAAACGCTGAATAGAATAAATCATAATGCCAGATCCAAAAACGTTTTGATGGTTTTAAAATGTGAAAATCGACCAACACATATATCAGCTGCTTCGGTAAATCGCTTTGATAAGTTATTGATGAAGAAAACATAATAATCCATGCTCCATGAATTATATTTTAAGATACGCTTATAAAGTCCGAACGATCAAAAAAATAACCATTGGTAGATAGCAATTTTCTCCGGATAAACCTTACGAAAAAACGATATGGCAGAAGAGTTGCACAGACAATTTTTCACGCAATTATCGCTTTATAATGACGTGAAAGTTTTATACTGCATGGTCGAACAAACGCCGCGCCCAGGAGGTCTTCATGAAATAAGAATTTCGATTATTTTAGTCACTGATATCAGGATACACAAAATCACCATTTCGCAGATCTTCTTTGTACAAATACGCCTTTAGAATCAGTTGATTTTCTTGAACAGAAGAATGAATGATCGATAAAGCGGTTGCCCACAATTGACGGAAGAGATCGCCGCTGATATGATTGGTGTCGGTAAGTTTATTTAAATTATGAATCGATTTATAAACTCACGGTCGCGGCGATGTCGTTAACGGCAAATGGCTCGGTCCTTACTTAACTTCACGCTCCCTTGATCACAGAGACTTATCTGAGTTCATGGTGAAATGCTCATGTCAGCAATTTATGATGACATGTCATCTTCATCTTCCGATTATAGTACTGGACCTTCATAACAATGAGTTCAATCAATCAGAGGACCACGCCGGCATGCTTAACTGATACAGATATATCATGGCGGATGTTAGCGTCCAGCATGCATACGGTCCGAGCAATGCATATACGCATGGCTAAACATTTTTGTATATTATCGTGGTTATGAGTTGTTTTGAACACAATGTTTAATGCTTCATAATCCTTGAATGTAAAAATTACTTTATCAGCTTATAATGCTGCACATAAGCTGGAGCTAAATTAGTCATATGACTGTTTAACGTGGTAGACGGATCATAATGTTACCATCAACAATTTAACTTCTGACATGTTCTTACGAGACGAAATGGCCTGATTGGCAAATTTGCATTCTGACTAGCAAAGTCGTTATTAGTAATTTAATCATACATCAATGTTGAATCTTAGTTAAGCAATTACGGAATGGCGTTGATTGGGTAAAAATGATATCGACTGAAACCCATGAATTAAAGCACGAACCAGGTAGTGCTCATCCGAGCCTTGACGGCACATGACGTTTGAATTTAAAACGACTATAATGACGGCAAGATCCCCACCATGATTGAAAGAATCACTGCCAGACTGACTGATGATATTTCTTGGAGCTTCCGCCACATGGTGGTTGAATCCGCTGTTACAGAAATTAAAAACTGATTACCTCCATCGAAGAAGAAGCGCACCTGCTTTAGATGAACTAATGCAACGTCGCCTGATAGTTCCGTGGCGACTACGGCGAAGAAAGTGATATTCATCGTTGTTGGTCAGCGACATCACGTTCGTCATTGAACGATACAACAACGAAACCACTGGCTGCGGCATGAGCGTGGCAGAGAACATATTATGAAGTCGCAGTCACTCCCAGTGGAAAAAACAATATGGTAGCGTGAAATCGTCGTTTTATACGCTACACAAAATACATACTATTAAACAATAAACCGCCACCCATTAGGGAAAACTGAATCGTTGGCATGATGATGGTACAACTGCCTCAAACAAGAGTTGAACCAAGATGCGCCCTTCGAACCATAATCTCAGTGACGCATGTCGAAAGCGCCCGGTAATATCGGAATCTTCTTCCTCGGTGAATTTTCGTGAAATTATTGATCCATGCCATTCTCGCAAACAACTGGTAATTAAACCTCCCACTGTACTTTATAATTTATTATTACCTGACGCATCATAAGACTTGAAAGCACAAATTTTAAAAATCACACGGTTCTGATGACTTGATATCAAAATGAACCAGCTTCTCCGCATCTTCATTTGAGTATTTATGCTTGCAAGAATTTTGAGTTCTGCCGTTAATCTTCTGAAGACGAATCAGGAAGACCATCGTTGTGGAGTGAACTATTAAAAACATTAAAGGATTATTGGAAGTTACGCTGGAATCAGTTATTTACAAGATGGAGTTATGACATTCCCACGATCACACAAAGAATCAAAGTTTTGAAAGTAGTTTAACTTAATATTAAGGTGTTGCTGCCAGATTGAACAACATGTCGAGCATTTCTCACCAATTTCTCTGGAAAGTGCAGGAACCGGACTCACTGAGTTTTGCTGGGACTAGTAGTGTTGATGTAGACGTTTTGAAGTGGAAGTGGTGGATAGTGTGACAATGTTAAAAGAAATTAAAAAAGCGGGATTTATCAGCCGCATTTTATCCGAGCGAGAGCTTGCTTGGTTAAAATGGAAAGATAAGGTTAAACACCCAAGCAGACGCCGAAGATAGAGCGACAGGCAAGTAGCACACGTAACTGAACCAGCACAA
    AAAGTGCAGGAACCGGACTCACTGAGTTTTGCTGGGACTAGTAGTGTTGATGTAGACGTTTTGAAGTGGAAGTGGTGGATAGTGTGACAATGTTAAAAGAAATTAAAAAAGCGGGATTTATCAGCCGCATTTTATCCGAGCGAGAGCTTGCTTGGTTAAAATGGAAAGATAAGGTTAAA
    align:  6.9% (179/2606)
    
    """

    def compute_segment(self, segment: AlignedSegment):
        seq_len = len(segment.query_sequence)
        align_len = len(segment.query_alignment_sequence)
        ratio = align_len / seq_len

        return [
            ratio,
            seq_len,
            align_len,
            segment.query_sequence,
            segment.query_alignment_sequence,
        ]

    def build_report(self, data: AlignmentFile, report: Report):
        stats = sorted(
            map(self.compute_segment, data.fetch()),
            key=lambda _: _[0],
            reverse=True
        )

        output = []
        for ratio, seq_len, align_len, seq, align in stats:
            output.extend(map(str, [
                seq, align, f'align: {100 * ratio: .1f}% ({align_len}/{seq_len})',
            ]))
        report.features['ratio'] = '\n'.join(map(str, [
            f'{seq}\nalignment ratio: {100 * ratio: .1f}%'
            for ratio, seq_len, align_len, seq, align in stats
        ]))
        report.features['lengths'] = '\n'.join(map(str, [
            f'{seq}\nseq length: {seq_len}\naligned length: {align_len}'
            for ratio, seq_len, align_len, seq, align in stats
        ]))
